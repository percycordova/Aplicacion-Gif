{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","Hooks/UseFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","UseFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OACI,sBAAKC,UAAU,gBAAf,UACI,8CACA,uBAAMC,SAfQ,SAACC,GACnBA,EAAEC,iBACEL,EAAWM,OAAOC,OAAS,GAC3BT,GAAc,SAAAU,GAAI,OAAKR,GAAL,mBAAoBQ,OACtCP,EAAc,KAGdA,EAAc,KAQd,UACI,8CACA,uBAAOQ,KAAK,OAAOC,MAAOV,EAAYW,SArBtB,SAACP,GACzBH,EAAcG,EAAEQ,OAAOF,iB,+BCRlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,qDACwCC,UAAUH,GADlD,8DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGKA,EAAKC,OAHV,uBAGVC,EAHU,EAGVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAYXM,GAZW,4CAAH,sDCENO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAIN,GAGR,sBAAKvB,UAAU,OAAf,UACI,qBAAK8B,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCLHQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZf,mBAAS,CAC/BsB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAqBtC,OAdAC,qBAAU,WAENzB,EAAOC,GACNyB,MAAK,SAAAC,GACAH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAMlB,CAACrB,IAEGsB,EDjByBK,CAAa3B,GAAhCa,EAHwB,EAG7BN,KAAYc,EAHiB,EAGjBA,QACpB,OACI,sBAAMjC,UAAU,kBAAhB,UACI,6BAAKY,IACJqB,GAAS,wCAEP,oBAAIjC,UAAU,YAAd,SAGKyB,EAAOJ,KAAI,SAAAC,GAAG,OAEV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEdxBiB,EAAe,WAAO,IAAD,EACM3C,mBAAS,CAAC,cAAc,WAD9B,mBACvB4C,EADuB,KACX7C,EADW,KAG9B,OACI,qCACI,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAGQ6C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCXjC8B,IAASC,OACL,cAAE,EAAF,IACAC,SAASC,eAAe,W","file":"static/js/main.02f02de7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handdleInputtChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubtmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n\r\n        } else {\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"cabecera-fija\">\r\n            <h2>GifExpertApp</h2>\r\n            <form onSubmit={handleSubtmit}>\r\n                <h2>Add Category</h2>\r\n                <input type=\"text\" value={inputValue} onChange={handdleInputtChange} />\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n\r\n};\r\n","export const getGif = async (category) => {\r\n    const url = `https://api.giphy.com/v1/stickers/search?q=${encodeURI(category)}&limit=8&api_key=Qk6fN3mpsj2lZFugrdDXpJJQCs7tMC1q`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();//tiene dos atributos data y meta\r\n    // eslint-disable-next-line array-callback-return\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    console.log(id);\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { UseFetchGifs } from '../Hooks/UseFetchGifs'\r\n//import { getGif } from '../helpers/getGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images,loading } = UseFetchGifs(category);\r\n    return (\r\n        < div className=\"contenedor-card\" >\r\n            <h3>{category}</h3>\r\n            {loading&&<p>Loading</p>}\r\n\r\n            {  <ul className=\"card-grid\">\r\n                {\r\n\r\n                    images.map(img =>\r\n                    (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} //paso el objeto como parametro\r\n                        />\r\n                    )\r\n                    )\r\n\r\n                }\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport { useEffect, useState } from 'react'\r\nimport { getGif } from '../helpers/getGif'\r\nexport const UseFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGif(category)\r\n        .then(imgs=>{\r\n              setstate({\r\n                data: imgs,\r\n                loading: false,\r\n              });\r\n             \r\n        });\r\n\r\n\r\n    }, [category])\r\n\r\n    return state; //{data:[], loading:true}\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Dragon ball','Naruto']);\r\n\r\n    return (\r\n        <>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    //categories.map(category => <li key={category}>{category} </li>) //Cunado retorno solo una linea no es necesario el return ni las llaves\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    < GifExpertApp/>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}